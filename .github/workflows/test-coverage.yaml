# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

name: test-coverage

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::covr
          needs: coverage

      - name: Test coverage
        run: |
          # Run coverage with covr
          library(covr)

          # Run tests first to ensure they pass
          library(testthat)
          test_results <- test_package("verdadecu", reporter = "summary")

          # Generate coverage report
          cov <- package_coverage(
            type = "tests",
            quiet = FALSE,
            clean = FALSE
          )

          # Print coverage summary
          print(cov)

          # Calculate coverage percentage
          percent <- percent_coverage(cov)

          # Handle data packages with no R code
          if (is.nan(percent) || is.null(percent) || length(cov) == 0) {
            cat("\n====================================\n")
            cat("DATA PACKAGE - No executable R code\n")
            cat("Tests verify data integrity only\n")
            cat("All", length(test_results), "test files passed\n")
            cat("====================================\n\n")

            # Create a minimal coverage file for data packages
            writeLines("0", "coverage.txt")
            cat("Coverage: 0% (data package - no R functions)\n")
          } else {
            cat("\n====================================\n")
            cat("TOTAL CODE COVERAGE:", round(percent, 2), "%\n")
            cat("====================================\n\n")

            # Generate coverage reports
            covr::to_cobertura(cov, filename = "coverage.xml")
            writeLines(as.character(percent), "coverage.txt")
          }
        shell: Rscript {0}

      - name: Upload coverage reports to Codecov
        if: env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
        continue-on-error: true

      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            coverage.txt